=======
Control Flow
=======

typedef i64 = integer<64, true>;
typedef f64 = double<64>;
fn do_stuff(x: i64);

fn main() {
  const fs: f64 = 14.88;
  if (true) {
    while (false) {
      for (let x: i64 = 0; x < 40; x = x + 1) {
        do_stuff(x);
        break;
      }
      continue;
    }
  } else {
    return;
  }
}

---

(source_file
  (typedef name: (identifier)
           type: (integer_type size: (integer)
                               signed: (boolean)))
  (typedef name: (identifier)
           type: (double_type size: (integer)))
  (function name: (identifier)
            parameters: (parameter_list
              (parameter name: (identifier) type: (identifier))))
  (function name: (identifier)
            parameters: (parameter_list)
            body: (block
              (const_statement name: (identifier)
                               type: (identifier)
                               value: (double))
              (if_else condition: (boolean)
                  then: (block
                    (while condition: (boolean)
                           body: (block
                             (for init: (let_statement name: (identifier)
                                                       type: (identifier)
                                                       value: (integer))
                                  condition: (binary_expression left: (identifier)
                                                                operator: (binary_operator_lr)
                                                                right: (integer))
                                  step: (binary_expression left: (identifier)
                                                           operator: (binary_operator_ass)
                                                           right: (binary_expression left: (identifier)
                                                                                     operator: (binary_operator_add)
                                                                                     right: (integer)))
                                  body: (block
                                    (call_expression callable: (identifier)
                                                     arguments: (argument_list
                                                       (identifier)))
                                    (break_statement)))
                             (continue_statement))))
                  else: (block
                    (return_statement))))))
